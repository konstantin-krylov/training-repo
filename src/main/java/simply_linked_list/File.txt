
Need for Efficient Search
Let’s say we’re in the wine-selling business and millions of buyers are visiting our application every day.

Through our app, a customer can filter out items which have a price below n dollars, select a bottle from the search results, and add them to his cart. We have millions of users seeking wines with a price limit every second. The results need to be fast.

On the backend, our algorithm runs a linear search through the entire list of wines comparing the price limit entered by the customer with the price of every wine bottle in the list.

Then, it returns items which have a price less than or equal to the price limit. This linear search has a time complexity of O(n).

This means the bigger the number of wine bottles in our system, the more time it will take. The search time increases proportionately to the number of new items introduced.

If we start saving items in sorted order and search for items using the binary search, we can achieve a complexity of O(log n).

With binary search, the time taken by the search results naturally increases with the size of the dataset, but not proportionately.